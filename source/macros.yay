<?php

macro ·unsafe {
    ·chain (
        ·either(
            private,
            protected
        )·visibility,
        ·optional(
            ·either(
                ·ns(),
                ·token(T_ARRAY)
            )
        )·type,
        ·token(T_VARIABLE)·name,
        ·token("{"),
        ·repeat(
            ·either(
                ·chain(
                    get,
                    ·token(";")
                )·simpleGetter,
                ·chain(
                    get,
                    ·token("{"),
                    ·layer()·getterBody,
                    ·token("}"),
                    ·optional(·token(";"))
                )·getter,
                ·chain(
                    set,
                    ·token(";")
                )·simpleSetter,
                ·chain(
                    set,
                    ·token("{"),
                    ·layer()·setterBody,
                    ·token("}"),
                    ·optional(·token(";"))
                )·setter,
                ·chain(
                    immutable,
                    set,
                    ·token(";")
                )·immutableSimpleSetter,
                ·chain(
                    immutable,
                    set,
                    ·token("{"),
                    ·layer()·immutableSetterBody,
                    ·token("}"),
                    ·optional(·token(";"))
                )·immutableSetter,
                ·chain(
                    unset,
                    ·token(";")
                )·simpleUnsetter,
                ·chain(
                    unset,
                    ·token("{"),
                    ·layer()·unsetterBody,
                    ·token("}"),
                    ·optional(·token(";"))
                )·unsetter,
                ·chain(
                    immutable,
                    unset,
                    ·token(";")
                )·immutableSimpleUnsetter,
                ·chain(
                    immutable,
                    unset,
                    ·token("{"),
                    ·layer()·immutableUnsetterBody,
                    ·token("}"),
                    ·optional(·token(";"))
                )·immutableUnsetter
            )
        )·accessors,
        ·token("}"),
        ·optional(·token(";"))
    )
} >> {
    ··collapse(··trim(
        ·visibility ·name;

        ·accessors ··· {
            ·simpleGetter ?· {··trim(
                public function ··concat(get ··studly(··unvar(·name)))()··class_accessors_return(·type) {
                    return $this->··unvar(·name);
                }
            )}

            ·getter ?· {··trim(
                public function ··concat(get ··studly(··unvar(·name)))()··class_accessors_return(·type) {
                    ··trim(·getterBody)
                }
            )}

            ·simpleSetter ?· {··trim(
                public function ··concat(set ··studly(··unvar(·name)))(··trim(·type $value)) {
                    $this->··unvar(·name) = $value;
                    return $this;
                }
            )}

            ·setter ?· {··trim(
                public function ··concat(set ··studly(··unvar(·name)))(··trim(·type $value)) {
                    ··trim(·setterBody)
                }
            )}

            ·immutableSimpleSetter ?· {··trim(
                public function ··concat(with ··studly(··unvar(·name)))(··trim(·type $value)) {
                    $clone = clone($this);
                    $clone->··unvar(·name) = $value;
                    return $clone;
                }
            )}

            ·immutableSetter ?· {··trim(
                public function ··concat(with ··studly(··unvar(·name)))(··trim(·type $value)) {
                    $clone = clone $this;

                    $bound = \Closure::bind(function() use ($value) {
                        ··trim(·immutableSetterBody)
                    }, $clone);

                    $bound();

                    return $clone;
                }
            )}

            ·simpleUnsetter ?· {··trim(
                public function ··concat(unset ··studly(··unvar(·name)))() {
                    unset($this->··unvar(·name));
                    return $this;
                }
            )}

            ·unsetter ?· {··trim(
                public function ··concat(unset ··studly(··unvar(·name)))() {
                    ··trim(·unsetterBody)
                }
            )}

            ·immutableSimpleUnsetter ?· {··trim(
                public function ··concat(without ··studly(··unvar(·name)))() {
                    $clone = clone($this);
                    unset($clone->··unvar(·name));
                    return $clone;
                }
            )}

            ·immutableUnsetter ?· {··trim(
                public function ··concat(without ··studly(··unvar(·name)))() {
                    $clone = clone $this;

                    $bound = \Closure::bind(function () {
                        ··trim(·immutableUnsetterBody)
                    }, $clone);

                    $bound();

                    return $clone;
                }
            )}
        }
    ))
}

macro ·unsafe {
    function __get(···parameters) {
        accessors;
        ···body
    }
} >> {
    function __get(···parameters) {
        if ($result = $this->handleGetClassAccessors(···parameters)) {
            return $result;
        }

        ··trim(···body)
    }
}

macro ·unsafe {
    function __set(···parameters) {
        accessors;
        ···body
    }
} >> {
    function __set(···parameters) {
        if ($result = $this->handleSetClassAccessors(···parameters)) {
            return $result;
        }

        ··trim(···body)
    }
}

macro ·unsafe {
    function __unset(···parameters) {
        accessors;
        ···body
    }
} >> {
    function __unset(···parameters) {
        if ($result = $this->handleUnsetClassAccessors(···parameters)) {
            return $result;
        }

        ··trim(···body)
    }
}

macro {
    ·chain(
        class,
        ·ns()·name,
        ·optional (
            ·chain(
                extends,
                ·ns()·extendsName
            )
        )·extends,
        ·optional (
            ·chain(
                implements,
                ·lst(
                    ·ns()·implementsName,
                    ·token(",")
                )·implementsItems
            )
        )·implements,
        ·token("{"),
        ·layer()·body,
        ·token("}")
    )
} >> {
    class ·name ·extends ?·{ extends ·extendsName } ·implements ?·{ implements ·implementsItems ···( , ){ ·implementsName } } {
        use \Pre\ClassAccessors\ClassAccessorsTrait;

        ·body
    }
}
