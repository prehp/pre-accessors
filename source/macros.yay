<?php

$(macro :unsafe) {
    $(chain (
        either(
            private,
            protected
        ) as visibility,
        optional(
            either(
                ns(),
                token(T_ARRAY)
            )
        ) as type,
        token(T_VARIABLE) as name,
        token("{"),
        repeat(
            either(
                chain(
                    get,
                    token(";")
                ) as simpleGetter,
                chain(
                    get,
                    token("{"),
                    layer() as getterBody,
                    token("}"),
                    optional(token(";"))
                ) as getter,
                chain(
                    set,
                    token(";")
                ) as simpleSetter,
                chain(
                    set,
                    token("{"),
                    layer() as setterBody,
                    token("}"),
                    optional(token(";"))
                ) as setter,
                chain(
                    immutable,
                    set,
                    token(";")
                ) as immutableSimpleSetter,
                chain(
                    immutable,
                    set,
                    token("{"),
                    layer() as immutableSetterBody,
                    token("}"),
                    optional(token(";"))
                ) as immutableSetter,
                chain(
                    unset,
                    token(";")
                ) as simpleUnsetter,
                chain(
                    unset,
                    token("{"),
                    layer() as unsetterBody,
                    token("}"),
                    optional(token(";"))
                ) as unsetter,
                chain(
                    immutable,
                    unset,
                    token(";")
                ) as immutableSimpleUnsetter,
                chain(
                    immutable,
                    unset,
                    token("{"),
                    layer() as immutableUnsetterBody,
                    token("}"),
                    optional(token(";"))
                ) as immutableUnsetter
            )
        ) as accessors,
        token("}"),
        optional(token(";"))
    ))
} >> {
    $$(collapse($$(trim(
        $(visibility) $(name);

        $(accessors ... {
            $(simpleGetter ? {$$(trim(
                public function $$(concat(get $$(studly($$(unvar($(name)))))))()$$(\Pre\ClassAccessors\classAccessorsReturn($(type))) {
                    return $this->$$(unvar($(name)));
                }
            ))})

            $(getter ? {$$(trim(
                public function $$(concat(get $$(studly($$(unvar($(name)))))))()$$(\Pre\ClassAccessors\classAccessorsReturn($(type))) {
                    $(getter ... {$$(trim($(getterBody)))})
                }
            ))})

            $(simpleSetter ? {$$(trim(
                public function $$(concat(set $$(studly($$(unvar($(name)))))))($$(trim($(type) $value))) {
                    $this->$$(unvar($(name))) = $value;
                    return $this;
                }
            ))})

            $(setter ? {$$(trim(
                public function $$(concat(set $$(studly($$(unvar($(name)))))))($$(trim($(type) $value))) {
                    $(setter ... {$$(trim($(setterBody)))})
                }
            ))})

            $(immutableSimpleSetter ? {$$(trim(
                public function $$(concat(with $$(studly($$(unvar($(name)))))))($$(trim($(type) $value))) {
                    $clone = clone($this);
                    $clone->$$(unvar($(name))) = $value;
                    return $clone;
                }
            ))})

            $(immutableSetter ? {$$(trim(
                public function $$(concat(with $$(studly($$(unvar($(name)))))))($$(trim($(type) $value))) {
                    $clone = clone $this;

                    $bound = \Closure::bind(function() use ($value) {
                        $(immutableSetter ... {$$(trim($(immutableSetterBody)))})
                    }, $clone);

                    $bound();

                    return $clone;
                }
            ))})

            $(simpleUnsetter ? {$$(trim(
                public function $$(concat(unset $$(studly($$(unvar($(name)))))))() {
                    unset($this->$$(unvar($(name))));
                    return $this;
                }
            ))})

            $(unsetter ? {$$(trim(
                public function $$(concat(unset $$(studly($$(unvar($(name)))))))() {
                    $(unsetter ... {$$(trim($(unsetterBody)))})
                }
            ))})

            $(immutableSimpleUnsetter ? {$$(trim(
                public function $$(concat(without $$(studly($$(unvar($(name)))))))() {
                    $clone = clone($this);
                    unset($clone->$$(unvar($(name))));
                    return $clone;
                }
            ))})

            $(immutableUnsetter ? {$$(trim(
                public function $$(concat(without $$(studly($$(unvar($(name)))))))() {
                    $clone = clone $this;

                    $bound = \Closure::bind(function () {
                        $(immutableUnsetter ... {$$(trim($(immutableUnsetterBody)))})
                    }, $clone);

                    $bound();

                    return $clone;
                }
            ))})
        })
    ))))
}

$(macro :unsafe) {
    function __get($(layer() as parameters)) {
        accessors;
        $(layer() as body)
    }
} >> {
    function __get($(parameters)) {
        if ($result = $this->handleGetClassAccessors($(parameters))) {
            return $result;
        }

        $$(trim($(body)))
    }
}

$(macro :unsafe) {
    function __set($(layer() as parameters)) {
        accessors;
        $(layer() as body)
    }
} >> {
    function __set($(parameters)) {
        if ($result = $this->handleSetClassAccessors($(parameters))) {
            return $result;
        }

        $$(trim($(body)))
    }
}

$(macro :unsafe) {
    function __unset($(layer() as parameters)) {
        accessors;
        $(layer() as body)
    }
} >> {
    function __unset($(parameters)) {
        if ($result = $this->handleUnsetClassAccessors($(parameters))) {
            return $result;
        }

        $$(trim($(body)))
    }
}

$(macro) {
    $(chain(
        class,
        ns() as name,
        optional (
            chain(
                extends,
                ns() as extendsName
            ) as extendsItem
        ),
        optional (
            chain(
                implements,
                lst(
                    ns() as implementsName,
                    token(",")
                ) as implementsItems
            )
        ) as implements,
        token("{"),
        layer() as body,
        token("}")
    ))
} >> {
    class $(name) $(extendsItem ? {extends $(extendsItem ... {$(extendsName)})}) $(implements ? {implements $(implements ... {$(implementsItems ... ( , ){$(implementsName)})})}) {
        use \Pre\ClassAccessors\ClassAccessorsTrait;

        $(body)
    }
}
